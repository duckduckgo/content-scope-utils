// Generated by ts-to-zod
import { z } from 'zod'

export const userScriptSchema = z.object({
  name: z.string(),
  id: z.string(),
  contents: z.string(),
})

export const remoteSourceSchema = z.object({
  remote: z.object({
    url: z.string(),
    fetchedAt: z.string(),
  }),
})

export const debugToolsSourceSchema = z.object({
  debugTools: z.object({
    modifiedAt: z.string(),
  }),
})

export const updatingRemoteSourceSchema = z.object({
  remote: z.object({
    url: z.string(),
  }),
})

export const updatingDebugToolsSourceSchema = z.object({
  debugTools: z.object({
    content: z.string(),
  }),
})

export const tabSchema = z.object({
  id: z.string().optional(),
  url: z.string(),
  title: z.string().optional(),
})

export const updateResourceParamsSchema = z.object({
  id: z.string(),
  source: z.union([updatingRemoteSourceSchema, updatingDebugToolsSourceSchema]),
})

export const getTabsResponseSchema = z.object({
  tabs: z.array(tabSchema),
})

export const remoteResourceSchema = z.object({
  id: z.string(),
  url: z.string(),
  name: z.string(),
  current: z.object({
    source: z.union([remoteSourceSchema, debugToolsSourceSchema]),
    contents: z.string(),
    contentType: z.string(),
  }),
})

export const getFeaturesResponseSchema = z.object({
  features: z.object({
    remoteResources: z.object({
      resources: z.array(remoteResourceSchema),
    }),
    userScripts: z
      .object({
        scripts: z.array(userScriptSchema),
      })
      .optional(),
  }),
})

export const apiSchema = z.object({
  getFeatures: getFeaturesResponseSchema.optional(),
  updateResource: updateResourceParamsSchema.optional(),
  getTabs: getTabsResponseSchema.optional(),
})
